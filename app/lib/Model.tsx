/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 ./public/model.glb --types --transform 
Files: ./public/model.glb [463.99KB] > /mnt/d/Projects/7aio/7aio-ui/model-transformed.glb [182.59KB] (61%)
*/

import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import type { GLTF as GLTFThree } from 'three/examples/jsm/loaders/GLTFLoader.js'
import { SkeletonUtils } from 'three-stdlib'

export type ActionName = 'Dance' | 'Death' | 'Idle' | 'Jump' | 'No' | 'Punch' | 'Running' | 'Sitting' | 'Standing' | 'ThumbsUp' | 'Walking' | 'WalkJump' | 'Wave' | 'Yes'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTFThree & {
  nodes: {
    FootL_1: THREE.Mesh
    LowerLegL_1: THREE.Mesh
    LegL: THREE.Mesh
    LowerLegR_1: THREE.Mesh
    LegR: THREE.Mesh
    Head_2: THREE.Mesh
    Head_3: THREE.Mesh
    Head_4: THREE.Mesh
    ArmL: THREE.Mesh
    ShoulderL_1: THREE.Mesh
    ArmR: THREE.Mesh
    ShoulderR_1: THREE.Mesh
    Torso_2: THREE.Mesh
    Torso_3: THREE.Mesh
    FootR_1: THREE.Mesh
    HandR_1: THREE.SkinnedMesh
    HandR_2: THREE.SkinnedMesh
    HandL_1: THREE.SkinnedMesh
    HandL_2: THREE.SkinnedMesh
    Bone: THREE.Bone
  }
  materials: {
    Grey: THREE.MeshStandardMaterial
    Main: THREE.MeshStandardMaterial
    Black: THREE.MeshStandardMaterial
    MainAlt: THREE.MeshStandardMaterial // Renamed duplicate 'Main'
    GreyAlt: THREE.MeshStandardMaterial // Renamed duplicate 'Grey'
  }
  animations: GLTFAction[]
}

interface ModelProps extends JSX.IntrinsicElements['group'] {
  position: number | THREE.Vector3 | [x: number, y: number, z: number] | readonly [x: number, y: number, z: number] | Readonly<THREE.Vector3> | undefined,
  animation?: ActionName;
}

export function Model({
  animation,
  position,
  ...props
}: ModelProps) {
  const group = React.useRef<THREE.Group>()
  const { scene, animations } = useGLTF('/model-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group);

  useEffect(()=>{
    // Reset semua animasi
    Object.values(actions).forEach(action => action?.stop());
    // Mulai animasi jika ada
    if (animation && actions[animation]) {
      actions[animation]?.reset().play();
      // Setelah ada animasi dan di jalankan, reset animasi setelah 5 detik
      const timeout = setTimeout(() => {
        actions[animation]?.stop();
        // actions.Idle?.play(); // Model akan dalam mode idle setelah animasi awal
      }, 5000);
      return () => clearTimeout(timeout);
    }
  }, [animation, actions]);

  return (
    <group ref={group} position={position} {...props} dispose={null}>
      <group name="Root_Scene">
        <primitive object={nodes.Bone} />
        <group name="HandR" position={[-0.003, 2.37, -0.021]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <skinnedMesh name="HandR_1" geometry={nodes.HandR_1.geometry} material={materials.Main} skeleton={nodes.HandR_1.skeleton} />
          <skinnedMesh name="HandR_2" geometry={nodes.HandR_2.geometry} material={materials.Grey} skeleton={nodes.HandR_2.skeleton} />
        </group>
        <group name="HandL" position={[-0.003, 2.37, -0.021]} rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <skinnedMesh name="HandL_1" geometry={nodes.HandL_1.geometry} material={materials.Main} skeleton={nodes.HandL_1.skeleton} />
          <skinnedMesh name="HandL_2" geometry={nodes.HandL_2.geometry} material={materials.Grey} skeleton={nodes.HandL_2.skeleton} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/model-transformed.glb')
